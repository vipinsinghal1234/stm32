
led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000015c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800028c  08000294  00010294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800028c  0800028c  00010294  2**0
                  CONTENTS
  4 .ARM          00000000  0800028c  0800028c  00010294  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800028c  08000294  00010294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800028c  0800028c  0001028c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000290  08000290  00010290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000294  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000294  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010294  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009f3  00000000  00000000  000102bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001c9  00000000  00000000  00010cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000017  00000000  00000000  00010e79  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000048  00000000  00000000  00010e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000050  00000000  00000000  00010ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001c29  00000000  00000000  00010f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000005e3  00000000  00000000  00012b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007e71  00000000  00000000  00013134  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001afa5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000054  00000000  00000000  0001b020  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000274 	.word	0x08000274

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000274 	.word	0x08000274

08000170 <main>:
#include<stdint.h>
#include<stdio.h>
#include"main.h"

int main(void)
{
 8000170:	b430      	push	{r4, r5}
	clk->GPIOAEN = 1;
	clk->GPIOCEN = 1;

	*PortCModeReg = *PortCModeReg & ~(3<<20);
	*PortCModeReg = *PortCModeReg | (1<<20);	//led on after mode define automatically
	*PortCOutReg = *PortCOutReg | (1<<13);	//led off
 8000172:	4c14      	ldr	r4, [pc, #80]	; (80001c4 <main+0x54>)


	while(1){
		uint8_t data = (uint8_t) (*PortAInReg & 0x00000001);
		if(data){
			*PortCOutReg = *PortCOutReg & (0);	//led on
 8000174:	2000      	movs	r0, #0
		}
		else{
			*PortCOutReg = *PortCOutReg | (1<<13);	//led off
 8000176:	4623      	mov	r3, r4
	clk->GPIOAEN = 1;
 8000178:	4913      	ldr	r1, [pc, #76]	; (80001c8 <main+0x58>)
	*PortCModeReg = *PortCModeReg & ~(3<<20);
 800017a:	4a14      	ldr	r2, [pc, #80]	; (80001cc <main+0x5c>)
	clk->GPIOAEN = 1;
 800017c:	680d      	ldr	r5, [r1, #0]
 800017e:	f045 0504 	orr.w	r5, r5, #4
 8000182:	600d      	str	r5, [r1, #0]
	clk->GPIOCEN = 1;
 8000184:	680d      	ldr	r5, [r1, #0]
 8000186:	f045 0510 	orr.w	r5, r5, #16
 800018a:	600d      	str	r5, [r1, #0]
	*PortCModeReg = *PortCModeReg & ~(3<<20);
 800018c:	6811      	ldr	r1, [r2, #0]
	*PortAModeReg = *PortAModeReg & ~(3<<0);
 800018e:	4d10      	ldr	r5, [pc, #64]	; (80001d0 <main+0x60>)
	*PortCModeReg = *PortCModeReg & ~(3<<20);
 8000190:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8000194:	6011      	str	r1, [r2, #0]
	*PortCModeReg = *PortCModeReg | (1<<20);	//led on after mode define automatically
 8000196:	6811      	ldr	r1, [r2, #0]
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	6011      	str	r1, [r2, #0]
	*PortCOutReg = *PortCOutReg | (1<<13);	//led off
 800019e:	6822      	ldr	r2, [r4, #0]
		uint8_t data = (uint8_t) (*PortAInReg & 0x00000001);
 80001a0:	490c      	ldr	r1, [pc, #48]	; (80001d4 <main+0x64>)
	*PortCOutReg = *PortCOutReg | (1<<13);	//led off
 80001a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80001a6:	6022      	str	r2, [r4, #0]
	*PortAModeReg = *PortAModeReg & ~(3<<0);
 80001a8:	682a      	ldr	r2, [r5, #0]
 80001aa:	f022 0203 	bic.w	r2, r2, #3
 80001ae:	602a      	str	r2, [r5, #0]
		uint8_t data = (uint8_t) (*PortAInReg & 0x00000001);
 80001b0:	680a      	ldr	r2, [r1, #0]
		if(data){
 80001b2:	f012 0f01 	tst.w	r2, #1
			*PortCOutReg = *PortCOutReg & (0);	//led on
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	bf12      	itee	ne
 80001ba:	6018      	strne	r0, [r3, #0]
			*PortCOutReg = *PortCOutReg | (1<<13);	//led off
 80001bc:	f442 5200 	orreq.w	r2, r2, #8192	; 0x2000
 80001c0:	601a      	streq	r2, [r3, #0]
 80001c2:	e7f5      	b.n	80001b0 <main+0x40>
 80001c4:	4001100c 	.word	0x4001100c
 80001c8:	40021018 	.word	0x40021018
 80001cc:	40011004 	.word	0x40011004
 80001d0:	40010800 	.word	0x40010800
 80001d4:	40010808 	.word	0x40010808

080001d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001d8:	480d      	ldr	r0, [pc, #52]	; (8000210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80001dc:	480d      	ldr	r0, [pc, #52]	; (8000214 <LoopForever+0x6>)
  ldr r1, =_edata
 80001de:	490e      	ldr	r1, [pc, #56]	; (8000218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e0:	4a0e      	ldr	r2, [pc, #56]	; (800021c <LoopForever+0xe>)
  movs r3, #0
 80001e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001e4:	e002      	b.n	80001ec <LoopCopyDataInit>

080001e6 <CopyDataInit>:

CopyDataInit:


  ldr r4, [r2, r3]
 80001e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001ea:	3304      	adds	r3, #4

080001ec <LoopCopyDataInit>:

LoopCopyDataInit:


  adds r4, r0, r3
 80001ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001ee:	428c      	cmp	r4, r1



  bcc CopyDataInit
 80001f0:	d3f9      	bcc.n	80001e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001f2:	4a0b      	ldr	r2, [pc, #44]	; (8000220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001f4:	4c0b      	ldr	r4, [pc, #44]	; (8000224 <LoopForever+0x16>)
  movs r3, #0
 80001f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001f8:	e001      	b.n	80001fe <LoopFillZerobss>

080001fa <FillZerobss>:

FillZerobss:

  str  r3, [r2]
 80001fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001fc:	3204      	adds	r2, #4

080001fe <LoopFillZerobss>:

LoopFillZerobss:

  cmp r2, r4
 80001fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000200:	d3fb      	bcc.n	80001fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000202:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000206:	f000 f811 	bl	800022c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800020a:	f7ff ffb1 	bl	8000170 <main>

0800020e <LoopForever>:

LoopForever:
    b LoopForever
 800020e:	e7fe      	b.n	800020e <LoopForever>
  ldr   r0, =_estack
 8000210:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000218:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800021c:	08000294 	.word	0x08000294
  ldr r2, =_sbss
 8000220:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000224:	2000001c 	.word	0x2000001c

08000228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000228:	e7fe      	b.n	8000228 <ADC1_2_IRQHandler>
	...

0800022c <__libc_init_array>:
 800022c:	b570      	push	{r4, r5, r6, lr}
 800022e:	2500      	movs	r5, #0
 8000230:	4e0c      	ldr	r6, [pc, #48]	; (8000264 <__libc_init_array+0x38>)
 8000232:	4c0d      	ldr	r4, [pc, #52]	; (8000268 <__libc_init_array+0x3c>)
 8000234:	1ba4      	subs	r4, r4, r6
 8000236:	10a4      	asrs	r4, r4, #2
 8000238:	42a5      	cmp	r5, r4
 800023a:	d109      	bne.n	8000250 <__libc_init_array+0x24>
 800023c:	f000 f81a 	bl	8000274 <_init>
 8000240:	2500      	movs	r5, #0
 8000242:	4e0a      	ldr	r6, [pc, #40]	; (800026c <__libc_init_array+0x40>)
 8000244:	4c0a      	ldr	r4, [pc, #40]	; (8000270 <__libc_init_array+0x44>)
 8000246:	1ba4      	subs	r4, r4, r6
 8000248:	10a4      	asrs	r4, r4, #2
 800024a:	42a5      	cmp	r5, r4
 800024c:	d105      	bne.n	800025a <__libc_init_array+0x2e>
 800024e:	bd70      	pop	{r4, r5, r6, pc}
 8000250:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000254:	4798      	blx	r3
 8000256:	3501      	adds	r5, #1
 8000258:	e7ee      	b.n	8000238 <__libc_init_array+0xc>
 800025a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800025e:	4798      	blx	r3
 8000260:	3501      	adds	r5, #1
 8000262:	e7f2      	b.n	800024a <__libc_init_array+0x1e>
 8000264:	0800028c 	.word	0x0800028c
 8000268:	0800028c 	.word	0x0800028c
 800026c:	0800028c 	.word	0x0800028c
 8000270:	08000290 	.word	0x08000290

08000274 <_init>:
 8000274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000276:	bf00      	nop
 8000278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800027a:	bc08      	pop	{r3}
 800027c:	469e      	mov	lr, r3
 800027e:	4770      	bx	lr

08000280 <_fini>:
 8000280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000282:	bf00      	nop
 8000284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000286:	bc08      	pop	{r3}
 8000288:	469e      	mov	lr, r3
 800028a:	4770      	bx	lr
